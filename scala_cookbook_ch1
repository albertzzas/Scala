class ch1 {

}


"hello, world".getClass.getName


val s="hello, world"
s.length


val as="hello"+" world"

"hello".foreach(println)

s.getBytes.foreach(println)

val result = "hello world".filter(_ != 'l')

"scala".drop(2).take(2).capitalize
"scala".drop(2)


//1.1

val s1="hello"
val s2="hello"
val s3="h"+"ello"

s1==s2
s1==s3

val s4:String = null
s3==s4
s4==s3


val s1="hello"
val s2="Hello"

s1.toUpperCase==s2.toUpperCase

val s1=null
val s2=null

s1.toUpperCase==s2.toUpperCase

val a="Marisa"
val b="marisa"

a.equalsIgnoreCase(b)

//1.2
val speach =
  """Four score and
    seven years ago"""

val speach =
  """Four score and
    |seven years ago""".stripMargin


val speach =
  """Four score and
    #seven years ago""".stripMargin('#')


val speach =
  """Four score and
    |seven years ago
    |our fathers""".stripMargin.replace("\n"," ")

// 1.3
"hello world".split(" ")
"hello world".split(" ").foreach(println)


val ss="eggs, milk,butter, coco puffs"

ss.split(",")

ss.split(",").map(_.trim)

"hello world, this is Al".split("\\s+")


//1.4
val name = "alb"


val age = 30


val weight = 170.0


println(s"$name is $age years old, and weights $weight pounds.")

//${}

println(s"Age next year: ${age + 1}")

println(s"You are 33 years old:${age == 30}")


case class Student(name: String, score: Int)


val hannah = Student("Hannah", 95)

println(s"${hannah.name} has a score of ${hannah.score}")


println(f"$name is $age years old, and weighs $weight%.2f pounds.")

printf(f"$name is $age years old, and weighs $weight%.0f pounds.")

s"alb\nbar"
raw"alb\nbar"

val upper = "hello, world".filter(_!='l').map(_.toUpper)


val upper = for(c <- "hello, world") yield c.toUpper


val aresult = for{
  | c <- "hello, world"
  | if c != 'l'
  | } yield c.toUpper


val aresult = for{c <- "hello, world" if c != 'l' } yield c.toUpper


val numPatter = "[0-9]+".r

val address = "123 Main Street Suite 101"

val match1 = numPatter.findFirstIn(address)

val match1 = numPatter.findAllIn(address)

match1.foreach(println)



val address = "123 Main Street".replaceAll("[0-9]", "x")
val regex = "[0-9]".r
val newAddress = regex.replaceAllIn("123 Main Street", "x")



val pattern = "([0-9]+) ([A-Za-z]+)".r
val pattern(count, fruit) = "100 Bananas"


"hello".charAt(0)
"hello"(0)


implicit class StringImprovements(s: String){ def increment = s.map(c => (c + 1).toChar)}

val result = "HAL".increment
